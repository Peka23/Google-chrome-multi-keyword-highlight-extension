ok can we check if  highlight.js is passing  info to contentScript ? When user pasts large chunk of text it will split  to next row/lin  thus creating keyword for each row can we confirm this function is working and text is propely set as key word and that content script is registering this key words  and  searchning for matchning text?

manifest file:
{
  "manifest_version": 3,
  "name": "Text Highlighter",
  "version": "1.0",
  "permissions": [
    "activeTab",
    "storage",
    "tabs"
  ],
  "optional_host_permissions": [
    "https://*/*",
    "http://*/*"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["contentScript.js"]
    }
  ],
  "action": {
    "default_popup": "Highlighter.html",
    "default_icon": "icon.png"
  },
  "icons": {
    "48": "icon.png"
  }
}

HTML file:
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Highlighter</title>
    <link rel="stylesheet" href="highlighter.css">
        <script src="highlighter.js" defer></script>
</head>
<body>
    <main>
        <div id="textRows" class="container"></div>
    </main>
</body>
</html>
CSS file:
.container {
    width: 300px;
    min-height: 100px;
    max-height: 500px; /* Allow expansion */
    overflow: auto;
    background-color: #f0f0f0;
    padding: 5px;
}

.row {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 5px;
    padding: 5px;
    background-color: #fff;
    border: 1px solid #ccc;
}
.color-picker {
    width: 30px;
    height: 20px;
    border: none;
    margin-left: 10px;
    cursor: pointer;
}

.text {
    flex-grow: 1;
    margin-right: 10px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width: 70%; /* Limit the text width */
}

.slider-toggle, .color-picker {
    flex-shrink: 0; /* Prevent these elements from shrinking */
}
.slider-toggle:checked {
    background-color: #4CAF50;
}

.slider-toggle:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
    border-radius: 50%;
}
.delete-btn {
    padding: 2px 5px;
    font-size: 16px;
    color: red;
    background: none;
    border: none;
    cursor: pointer;
}

.slider-toggle:checked:before {
    transform: translateX(20px);
}


Highlighter.js file:
document.addEventListener('DOMContentLoaded', () => {
    restoreState();
    updateRows(50);
});

function restoreState() {
    chrome.storage.local.get(['rows'], function(result) {
        if (result.rows) {
            result.rows.forEach((row, index) => {
                const textSpan = document.querySelectorAll('.text')[index];
                const colorPicker = document.querySelectorAll('.color-picker')[index];
                const toggleBtn = document.querySelectorAll('.slider-toggle')[index];
                if (textSpan && colorPicker && toggleBtn) {
                    textSpan.textContent = row.text;
                    colorPicker.value = row.color;
                    toggleBtn.checked = row.isActive;
                    if (row.isActive) {
                        updateHighlight(row.text, row.color);
                    }
                }
            });
        }
    });
}

function saveState() {
    const rows = Array.from(document.querySelectorAll('.row')).map(row => {
        return {
            text: row.querySelector('.text').textContent,
            color: row.querySelector('.color-picker').value,
            isActive: row.querySelector('.slider-toggle').checked
        };
    });
    chrome.storage.local.set({rows: rows});
}

function updateRows(numRows) {
    const container = document.getElementById('textRows');
    container.innerHTML = '';
    const colors = ['#FFFF00', '#4682B4', '#32CD32', '#FFD700', '#6A5ACD', '#FF4500', '#20B2AA', '#C71585', '#FFA500', '#008B8B'];

    for (let i = 0; i < numRows; i++) {
        const row = document.createElement('div');
        row.className = 'row';
        row.style.backgroundColor = colors[i % colors.length];

        const textSpan = document.createElement('span');
        textSpan.className = 'text';
        textSpan.contentEditable = true;
        textSpan.oninput = (event) => handleTextInput(event, i, colors[i % colors.length]);
        textSpan.onblur = saveState;

        const colorPicker = document.createElement('input');
        colorPicker.type = 'color';
        colorPicker.className = 'color-picker';
        colorPicker.value = colors[i % colors.length];
        colorPicker.onchange = (event) => {
            row.style.backgroundColor = event.target.value;
            updateHighlight(textSpan.textContent, event.target.value);
            saveState();
        };

        const toggleBtn = document.createElement('input');
        toggleBtn.type = 'checkbox';
        toggleBtn.className = 'slider-toggle';
        toggleBtn.checked = true;
        toggleBtn.onchange = () => {
            toggleHighlight(textSpan.textContent, colorPicker.value, toggleBtn.checked);
            saveState();
        };

        row.appendChild(textSpan);
        row.appendChild(colorPicker);
        row.appendChild(toggleBtn);
        container.appendChild(row);
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-btn';
        deleteBtn.textContent = 'X';
        deleteBtn.onclick = () => {
            row.remove();
            saveState();
        };

        row.appendChild(textSpan);
        row.appendChild(colorPicker);
        row.appendChild(toggleBtn);
        row.appendChild(deleteBtn);
        container.appendChild(row);
    }
};



function handleTextInput(event, rowIndex, color) {
    const maxCharsPerRow = 150;
    let textContent = event.target.textContent;
    if (textContent.length > maxCharsPerRow) {
        event.target.textContent = textContent.slice(0, maxCharsPerRow);
        textContent = textContent.slice(maxCharsPerRow);

        const nextRow = event.target.parentElement.nextElementSibling;
        if (nextRow) {
            const nextTextSpan = nextRow.querySelector('.text');
            nextTextSpan.textContent = textContent + nextTextSpan.textContent;
            handleTextInput({target: nextTextSpan}, rowIndex + 1, color);
        }
    }
    updateHighlight(textContent, color);
}

function updateHighlight(keywords, color) {
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
        chrome.tabs.sendMessage(tabs[0].id, {action: "highlight", keywords: keywords.split(' '), color: color});
    });
}
function toggleHighlight(keywords, color, isActive) {
    if (isActive) {
        updateHighlight(keywords, color);
    } else {
        updateHighlight(keywords, 'transparent'); // Remove highlighting
    }
    saveState();
}

background.js file:
// popup.js or background.js
function updateHighlight(keywords, color) {
  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      chrome.tabs.sendMessage(tabs[0].id, {action: "highlight", keywords: keywords.split(' '), color: color});
  });
}

contentScript.js file:
// This function listens for messages from the background or popup script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "highlight") {
      highlightText(request.keywords, request.color);
  }
});


// Function to apply highlighting to text on the page
function highlightText(keywords, color) {
  const bodyTextNodes = getTextNodesIn(document.body);
  keywords.forEach(keyword => {
      const regex = new RegExp(`(${keyword})`, 'gi'); // Regex to match the keyword globally and case-insensitively
      bodyTextNodes.forEach(node => {
          const matches = [...node.textContent.matchAll(regex)];
          if (matches.length > 0) {
              const newContent = document.createDocumentFragment();
              let lastIndex = 0;
              matches.forEach(match => {
                  const start = match.index;
                  const end = start + match[0].length;
                  newContent.appendChild(document.createTextNode(node.textContent.slice(lastIndex, start)));
                  const highlightSpan = document.createElement('span');
                  highlightSpan.style.backgroundColor = color;
                  highlightSpan.textContent = node.textContent.slice(start, end);
                  newContent.appendChild(highlightSpan);
                  lastIndex = end;
              });
              newContent.appendChild(document.createTextNode(node.textContent.slice(lastIndex)));
              node.parentNode.replaceChild(newContent, node);
          }
      });
  });
}

// Helper function to retrieve all text nodes within a given node
function getTextNodesIn(node) {
  let textNodes = [];
  if (node.nodeType === Node.TEXT_NODE) {
      textNodes.push(node);
  } else {
      const children = node.childNodes;
      for (let i = 0; i < children.length; i++) {
          textNodes.push(...getTextNodesIn(children[i]));
      }
  }
  return textNodes;
}



This is working google extenssion that highlights keywords on web page.
Based on this code create  google extension that will highlight multiple key wordsdifferent color, green, yellow, orange, cyan, pink in aloop
User can insert  block of text . Input text should be persistant in ui
{
  "manifest_version": 3,
  "name": "Text Highlighter",
  "version": "1.0",
  "permissions": [
    "activeTab",
    "storage",
    "tabs",
    "scripting"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["contentScript.js"]
    }
  ],
  "action": {
    "default_popup": "Highlighter.html",
    "default_icon": "icon.png"
  },
  "icons": {
    "48": "icon.png"
  }
}

HTML:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Highlighter</title>
    <script src="highlighter.js" defer></script>
</head>
<body>
    <input type="text" id="inputText" placeholder="Enter text to highlight">
    <button id="highlightButton">Highlight</button>
</body>
</html>


highlighter.js:
document.getElementById('highlightButton').addEventListener('click', () => {
    const text = document.getElementById('inputText').value;
    chrome.runtime.sendMessage({action: "highlight", text: text});
});

backgroun.js:
chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  if (request.action === "highlight") {
      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
          chrome.scripting.executeScript({
              target: {tabId: tabs[0].id},
              function: highlightTextOnPage,
              args: [request.text]
          });
      });
  }
});

function highlightTextOnPage(text) {
  const regex = new RegExp(text, 'gi');
  document.body.innerHTML = document.body.innerHTML.replace(regex, `<span style="background-color: yellow;">${text}</span>`);
}